'use strict';

const {resolve} = require('path');
const {PassThrough} = require('stream');

const File = require('vinyl');
const noop = require('lodash/noop');
const test = require('tape');
const svelte = require('.');
const {VERSION} = require('svelte');

const expected = `/* generated by Svelte v${VERSION} */\n\nfunction create_m`;

test('gulp-svelte', t => {
	t.plan(9);

	svelte()
	.on('error', t.fail)
	.on('data', file => {
		t.deepEqual(file, new File(), 'should read null file as it is.');
	})
	.end(new File());

	svelte()
	.on('error', t.fail)
	.on('data', ({contents}) => {
		t.equal(
			contents.toString().substr(0, expected.length),
			expected,
			'should transform HTML with Svelte.'
		);
	})
	.end(new File({
		contents: Buffer.from('<p></p>')
	}));

	svelte({css: false})
	.on('error', t.fail)
	.on('data', ({path, contents}) => {
		if (path.endsWith('js')) {
			t.equal(
				path,
				resolve('index.js'),
				'should replace the existing file extension with `.js`.'
			);

			t.notOk(
				contents.includes('ghostwhite'),
				'should remove CSS from Svelte source when `css` option is `false`.'
			);

			return;
		}

		t.equal(
			path,
			resolve('index.css'),
			'should emit a CSS file when `css` option is `false`.'
		);
	})
	.end(new File({
		path: resolve('index.html'),
		contents: Buffer.from('<style>*{color:ghostwhite}</style><b></b>')
	}));

	svelte({css: false})
	.on('error', t.fail)
	.end(new File({contents: Buffer.from('<style>*{}</style>')}));

	svelte({
		preprocess: {
			markup({content}) {
				return {code: content.replace('original', '</>')};
			}
		}
	})
	.on('error', err => {
		t.equal(
			err.message,
			'Expected valid tag name',
			'should preprocess contents with preprocessors.'
		);
		t.notOk(
			'fileName' in err,
			'should not include `fileName` property to the error when the object doesn\'t have filename.'
		);
	})
	.end(new File({contents: Buffer.from('original')}));

	svelte()
	.on('error', ({fileName}) => {
		t.equal(
			fileName,
			resolve('tmp.html'),
			'should include `fileName` property to the error when the object have filename.'
		);
	})
	.end(new File({
		path: resolve('tmp.html'),
		contents: Buffer.from('<a//>')
	}));

	svelte()
	.on('error', ({message}) => {
		t.equal(
			message,
			'Streaming not supported',
			'should emit an error when it takes a stream-mode file.'
		);
	})
	.end(new File({contents: new PassThrough()}));

	svelte()
	.on('error', ({message}) => {
		t.equal(
			message,
			'Expected a Vinyl file object of a Svelte template, but got a non-Vinyl value [ \'foo\' ] (array).',
			'should emit an error when it takes a non-Vinyl object.'
		);
	})
	.end(['foo']);
});

test('Argument validation', t => {
	t.throws(
		() => svelte(new Uint32Array(0)),
		/Expected an options object to set Svelte compiler options .*, but got Uint32Array\(0\) \[\]\./u,
		'should throw an error when the first argument is not a plain object.'
	);

	try {
		svelte({
			generate: false,
			onerror: noop,
			preprocess: new Int16Array(0)
		});
	} catch ({message}) {
		t.equal(
			message,
			`Found 3 errors in gulp-svelte options:
1. Expected \`generate\` option to be either \`dom\` or \`ssr\` (string), but false (boolean) was provided. gulp-svelte doesn't support {generate: false} as it's designed to emit code, not an AST.
2. gulp-svelte doesn't support \`onerror\` option, but [Function: noop] was provided. Handle errors in the gulp way instead. https://github.com/gulpjs/gulp/blob/master/docs/why-use-pump/README.md#handling-the-errors
3. Expected \`preprocess\` option to be an <Object> to set Svelte preprocessor functions https://svelte.technology/guide#svelte-preprocess, but got Int16Array(0) [].`,
			'should throw an error when it takes invalid Svelte options.'
		);
	}

	try {
		svelte({
			preprocess: {
				script: new Map(),
				styles: noop
			}
		});
	} catch ({message}) {
		t.equal(
			message,
			`Found 2 errors in gulp-svelte options:
1. Expected every property of \`preprocess\` option to be a <Function>, but had \`script\` property was a non-function value Map(0) {}.
2. Expected \`preprocess\` option not to have any properties except for the supported ones \`markup\`, \`script\` and \`style\`, but had 'styles' property.`,
			'should throw an error when it takes invalid preprocessors.'
		);
	}

	t.throws(
		() => svelte({format: 'umd'}),
		/Expected `format` option to be one of `es`, `cjs` and `eval`, but 'umd' was provided\. /u,
		'should throw an error when `format` option is `amd`, `iife` or `umd`.'
	);

	t.throws(
		() => svelte({}, {}),
		/Expected 0 or 1 argument \(<Object>\), but got 2 arguments\./u,
		'should throw an error when it takes too many arguments.'
	);

	t.end();
});
